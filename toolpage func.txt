// Inside ToolPage.tsx, with the other handleGenerate functions

const handleAISketchToImageGenerate = async () => {
    // 1. Determine the source of the sketch and validate inputs
    const isDrawingMode = s2iInputMode === 'draw';
    const hasUploadedSketch = s2iSketchImage.file !== null;
    const hasDrawnSketch = /* Add logic here to check if the drawing canvas is empty */;
    
    if ((!isDrawingMode && !hasUploadedSketch) || (isDrawingMode && !hasDrawnSketch) || !s2iTextPrompt.trim()) {
        setProcessedImage({ url: null, isLoading: false, error: "Please provide a sketch (by drawing or uploading) and a text prompt." });
        return;
    }
    
    setProcessedImage({ url: null, isLoading: true, error: null });

    try {
        // 2. Prepare the main sketch image File object
        let sketchFile: File;
        if (isDrawingMode) {
            // Convert the drawing canvas to a file
            sketchFile = await new Promise(res => drawingCanvasRef.current!.toBlob(b => res(new File([b!], "drawing.png", {type: "image/png"})), 'image/png'));
        } else {
            sketchFile = s2iSketchImage.file!;
        }

        // 3. Upload the main sketch image
        const mainSketchUrl = await uploadImageAndGetUrl(sketchFile);
        
        // 4. Conditionally upload the style image if it exists
        let styleImageUrl: string | undefined = undefined;
        if (s2iStyleImage.file) {
            styleImageUrl = await uploadImageAndGetUrl(s2iStyleImage.file);
        }

        // 5. Construct the final parameters for the API call
        const apiParams = {
            imageUrl: mainSketchUrl,
            textPrompt: s2iTextPrompt,
            strength: s2iStrength,
            styleImageUrl: styleImageUrl,
            styleStrength: styleImageUrl ? s2iStyleStrength : undefined
        };

        // 6. Call the job and poll for the result
        const orderId = await startSketchToImageJob(apiParams);
        const resultUrl = await pollJobUntilComplete(orderId);
        
        // 7. Display the final image
        setProcessedImage({ url: resultUrl, isLoading: false, error: null });

    } catch (error) {
        console.error("An error occurred during Sketch to Image generation:", error);
        setProcessedImage({ url: null, isLoading: false, error: (error as Error).message });
    }
};