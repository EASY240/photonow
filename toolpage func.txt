// Inside ToolPage.tsx, with the other handleGenerate functions

const handleAIOutfitGenerate = async () => {
    // 1. Validate inputs
    if (!selectedImage.file) {
        setProcessedImage({ url: null, isLoading: false, error: "Please upload an image first." });
        return;
    }
    if (!outfitTextPrompt.trim()) {
        setProcessedImage({ url: null, isLoading: false, error: "Please describe the outfit you want or select a style." });
        return;
    }

    setProcessedImage({ url: null, isLoading: true, error: null });
    // setStatusMessage("Preparing your image...");

    try {
        // 2. Upload the main image
        const mainImageUrl = await uploadImageAndGetUrl(selectedImage.file);

        // setStatusMessage("Generating your new outfit...");

        // 3. Call the API job function. The logic is simple.
        const orderId = await startOutfitJob({
            imageUrl: mainImageUrl,
            textPrompt: outfitTextPrompt,
        });

        // 4. Patient polling using our unified poller.
        // setStatusMessage("Finalizing your look...");
        const resultUrl = await pollJobUntilComplete(orderId);

        // 5. Display the result.
        setProcessedImage({ url: resultUrl, isLoading: false, error: null });

    } catch (error) {
        console.error("An error occurred during outfit generation:", error);
        setProcessedImage({ url: null, isLoading: false, error: (error as Error).message });
    }
};