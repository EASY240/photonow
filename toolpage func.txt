// Inside ToolPage.tsx, with the other handleGenerate functions

const handleAIFilterGenerate = async () => {
    // 1. Validate inputs and set loading state
    if (!selectedImage.file) {
        setProcessedImage({ url: null, isLoading: false, error: "Please upload an image first." });
        return;
    }
    if (!filterSelectedStyle && !filterCustomStyleImage && !filterTextPrompt) {
        setProcessedImage({ url: null, isLoading: false, error: "Please select a preset style, upload a custom style, or enter a text prompt." });
        return;
    }

    setProcessedImage({ url: null, isLoading: true, error: null });
    // setStatusMessage("Preparing your photo...");

    try {
        // 2. Upload the main image
        const mainImageUrl = await uploadImageAndGetUrl(selectedImage.file);

        // 3. Initialize final parameters
        let finalStyleUrl: string | undefined = undefined;
        let finalPrompt: string = "";

        // 4. Correctly determine the style source
        if (filterSelectedStyle) {
            finalPrompt = filterSelectedStyle.prompt;
            const styleImageBlob = await convertUrlToBlob(filterSelectedStyle.imageUrl);
            finalStyleUrl = await uploadImageAndGetUrl(new File([styleImageBlob], "style.jpeg", { type: 'image/jpeg' }));
        } else if (filterCustomStyleImage) {
            finalPrompt = filterTextPrompt;
            finalStyleUrl = await uploadImageAndGetUrl(filterCustomStyleImage);
        } else {
            finalPrompt = filterTextPrompt;
        }

        // 5. Call the API job function with all parameters
        // setStatusMessage("Applying your creative filter...");
        const orderId = await startAIFilterJob({
            imageUrl: mainImageUrl,
            styleImageUrl: finalStyleUrl,
            textPrompt: finalPrompt,
        });

        // 6. Use our robust, unified poller
        // setStatusMessage("Finalizing your artwork...");
        const resultUrl = await pollJobUntilComplete(orderId);

        // 7. Display the result
        setProcessedImage({ url: resultUrl, isLoading: false, error: null });

    } catch (error) {
        console.error("An error occurred during AI filter generation:", error);
        setProcessedImage({ url: null, isLoading: false, error: (error as Error).message });
    }
};