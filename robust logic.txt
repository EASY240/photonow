// Inside the AI Avatar Component

const handleGenerate = async () => {
    if (!userImage) { return; } // Add error handling
    
    setLoading(true);
    setStatusMessage("Preparing your image...");

    try {
        // 1. Upload main user image
        const mainImageUrl = await uploadImageAndGetUrl(userImage);
        setStatusMessage("Preparing your chosen style...");

        // 2. Initialize final parameters
        let finalStyleUrl: string | undefined = undefined;
        let finalPrompt: string = "";

        // 3. Determine and process the style source
        if (selectedStyle) {
            // Path A: PRESET style was chosen
            finalPrompt = selectedStyle.prompt;
            const styleImageBlob = await convertUrlToBlob(selectedStyle.imageUrl);
            finalStyleUrl = await uploadImageAndGetUrl(new File([styleImageBlob], "style.jpeg", { type: 'image/jpeg' }));
        } else if (customStyleImage) {
            // Path B: CUSTOM style image was uploaded
            finalPrompt = textPrompt; // Use the text from the textarea
            finalStyleUrl = await uploadImageAndGetUrl(customStyleImage);
        }

        setStatusMessage("Creating your avatar... this can take up to a minute.");

        // 4. Call the job with ALL required keys, defaulting to ""
        const orderId = await startAvatarJob({
            imageUrl: mainImageUrl,
            styleImageUrl: finalStyleUrl,
            textPrompt: finalPrompt || "A high-quality avatar" // A safe fallback prompt
        });

        // 5. Patient Polling Logic
        let retries = 0;
        const maxRetries = 20; // 60-second timeout
        let resultUrl = '';

        while (retries < maxRetries) {
            // ... (Your standard polling logic to call checkOrderStatus)
            // ... (Break loop and set resultUrl on 'active' status)
            // ... (Break loop and throw error on 'failed' status)
            
            await new Promise(resolve => setTimeout(resolve, 3000));
            retries++;
        }

        if (!resultUrl) {
            throw new Error("Avatar generation timed out. This can happen with complex requests. Please try again.");
        }

        // Display the final image with resultUrl
        setFinalImage(resultUrl);
        setLoading(false);

    } catch (error) {
        console.error("An error occurred during avatar generation:", error);
        setLoading(false);
        setStatusMessage(`Error: ${error.message}`);
    }
};